<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卖苹果的小男孩</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-14T09:21:01.897Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>eventDelegation</title>
    <link href="http://yoursite.com/2019/01/14/eventDelegation/"/>
    <id>http://yoursite.com/2019/01/14/eventDelegation/</id>
    <published>2019-01-14T08:56:18.000Z</published>
    <updated>2019-01-14T09:21:01.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件委托-事件代理"><a href="#事件委托-事件代理" class="headerlink" title="事件委托/事件代理"></a>事件委托/事件代理</h2><p>概述:事件委托,顾名思义就是拜托别人做事.事件委托就是用事件冒泡,就是写一个方法处理一类相同的事<br>经典案例就是取快递.快递寄到公司,员工在忙着敲代码,所以只能让行政或者前台(这个就是方法)签收快递(这一类的事),不管谁的快递都会签收,然后分发(就是任务分配)</p><p>事件委托的原理:<br>    事件委托是利用事件的冒泡原理来实现,冒泡(从下面开始慢慢往上走)<br>    DOM结构是一种树形结构 就像给树浇树叶子就像DOM的每个节点,我们不会在树的顶端浇树,这样很费水(内存资源),所以我们可以从树根浇水处理每一片叶子需要水的事件.(不考虑树叶能否直接获取水分)<br>实现方式 : 就是给父节点统一绑定子节点的相同事件.    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件委托-事件代理&quot;&gt;&lt;a href=&quot;#事件委托-事件代理&quot; class=&quot;headerlink&quot; title=&quot;事件委托/事件代理&quot;&gt;&lt;/a&gt;事件委托/事件代理&lt;/h2&gt;&lt;p&gt;概述:事件委托,顾名思义就是拜托别人做事.事件委托就是用事件冒泡,就是写一个方法处理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>call/aplly/bind</title>
    <link href="http://yoursite.com/2019/01/14/call-aplly-bind/"/>
    <id>http://yoursite.com/2019/01/14/call-aplly-bind/</id>
    <published>2019-01-14T02:16:21.000Z</published>
    <updated>2019-01-14T03:41:55.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call-apply-bind-区别以及用法"><a href="#call-apply-bind-区别以及用法" class="headerlink" title="call apply bind 区别以及用法"></a>call apply bind 区别以及用法</h2><p>主要是改变函数调用时的this指向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 有只猫叫小黑，小黑会吃鱼</span><br><span class="line">const cat=&#123;</span><br><span class="line">    name:&apos;xueqiu&apos;,</span><br><span class="line">    eatFish(...args)&#123;</span><br><span class="line">        console.log(&apos;this指向=&gt;&apos;,this)</span><br><span class="line">        console.log(this.name+&apos;吃鱼&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">// 有只狗叫大毛，大毛会吃骨头</span><br><span class="line">const dog=&#123;</span><br><span class="line">    name:&apos;damao&apos;,</span><br><span class="line">    eatBone(...args)&#123;</span><br><span class="line">        console.log(&apos;this指向=&gt;&apos;,this)</span><br><span class="line">        console.log(this.name+&apos;吃骨头&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 有一天大毛想吃鱼了，可是它不知道怎么吃。怎么办？小黑说我吃的时候喂你吃</span><br><span class="line">cat.eatFish.call(dog,&apos;汪汪汪&apos;,&apos;call&apos;)</span><br><span class="line">// 大毛为了表示感谢，决定下次吃骨头的时候也喂小黑吃</span><br><span class="line">dog.eatBone.call(cat,&apos;喵喵喵&apos;,&apos;call&apos;)</span><br><span class="line"></span><br><span class="line">cat.eatFist.apply(dog,[&apos;汪汪汪&apos;,&apos;call&apos;])</span><br><span class="line">dog.eatBone.apply(cat,[&apos;喵喵喵&apos;,&apos;apply&apos;])</span><br><span class="line">// 有一天他们觉得每次吃的时候再喂太麻烦了。干脆直接教对方怎么吃</span><br><span class="line">const test1 = cat.eatFish.bind(dog, &apos;汪汪汪&apos;, &apos;bind&apos;)</span><br><span class="line">const test2 = dog.eatBone.bind(cat, &apos;喵喵喵&apos;, &apos;bind&apos;)</span><br></pre></td></tr></table></figure></p><div class="tip"><br>    call传入的参数必须是一个一个的,而apply必须是一个数组,bind是直接改变这个函数this指向返回一个新的函数<br></div><h2 id="ex"><a href="#ex" class="headerlink" title="ex"></a>ex</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arrs=[1,2,3,4,5,6]</span><br><span class="line">const max=Math.max.apply(null,arrs)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.当我们使用一个函数需要改变this指向<br>2.如果你要传递的参数不多，则可以使用fn.call(thisObj, arg1, arg2 …)<br>3.如果你要传递的参数很多，则可以用数组将参数整理好调用fn.apply(thisObj, [arg1, arg2 …])<br>4.如果你想生成一个新的函数长期绑定某个函数给某个对象使用，则可以使用const newFn = fn.bind(thisObj); newFn(arg1, arg2…)</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><a href="https://segmentfault.com/a/1190000012772040" target="_blank" rel="noopener">参考文章</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;call-apply-bind-区别以及用法&quot;&gt;&lt;a href=&quot;#call-apply-bind-区别以及用法&quot; class=&quot;headerlink&quot; title=&quot;call apply bind 区别以及用法&quot;&gt;&lt;/a&gt;call apply bind 区别以及
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js设计模式</title>
    <link href="http://yoursite.com/2019/01/10/mode/"/>
    <id>http://yoursite.com/2019/01/10/mode/</id>
    <published>2019-01-10T07:41:06.000Z</published>
    <updated>2019-01-14T14:00:08.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name,age,sex)&#123;</span><br><span class="line">    var obj=new Object()</span><br><span class="line">    obj.name=name</span><br><span class="line">    obj.age=age</span><br><span class="line">    obj.sex=sex</span><br><span class="line">    obj.sayName=function()&#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line">var p1=createPerson(&apos;tf&apos;,24,&apos;男&apos;)</span><br><span class="line">var p2=new createPerson(&apos;wxc&apos;,24,&apos;女&apos;)</span><br></pre></td></tr></table></figure><h2 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var Singleton = function(name)&#123;</span><br><span class="line">   this.name=name</span><br><span class="line">   this.instance=null </span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName=function()&#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line">function getInstance(name)&#123;</span><br><span class="line">    if(!this.instance)&#123;</span><br><span class="line">        this.instance=new Singleton(name)</span><br><span class="line">    &#125;</span><br><span class="line">    return this.instance</span><br><span class="line">&#125;</span><br><span class="line">var a=getInstance(&apos;aa&apos;)</span><br><span class="line">var b=getInstance(&apos;bb&apos;)</span><br></pre></td></tr></table></figure><div class="tip"><br>    单体模式只会实例化一次相当于他只会做一件事<br>    =&gt; a===b true<br></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ex:实现单体模式弹窗</span><br><span class="line">var createWindow=(function()&#123;</span><br><span class="line">    var div</span><br><span class="line">    return function()&#123;</span><br><span class="line">        if(!div)&#123;</span><br><span class="line">            div=document.createElement(&apos;div&apos;)</span><br><span class="line">            div.innerHTML=&quot;dialog content&quot;</span><br><span class="line">            div.style.display=&quot;none&quot;</span><br><span class="line">            document.body.appendChild(div)</span><br><span class="line">        &#125;</span><br><span class="line">        return div</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">document.getElementById(&apos;id&apos;).onclick=function()&#123;</span><br><span class="line">    var win=createWindow()</span><br><span class="line">    win.style.dispaly=&apos;block&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">    this.name=&apos;tangfeng&apos;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName=function()&#123;</span><br><span class="line">    return this.name</span><br><span class="line">&#125;</span><br><span class="line">var app=(function()&#123;</span><br><span class="line">    var privateVar=&apos;A&apos;</span><br><span class="line">    function A()&#123;&#125;</span><br><span class="line">    var obj=new Person()</span><br><span class="line">    obj.A=&quot;aa&quot;</span><br><span class="line">    object.B=function()&#123;</span><br><span class="line">        return privateVar</span><br><span class="line">    &#125;</span><br><span class="line">    return obj</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><div class="tip"><br>    创建一个对象并以某些数据进行初始化,同时需要公开一些能够访问这些私有数据的方法–模块模式<br></div><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">var wwy=function(name)&#123;</span><br><span class="line">    this.name=name</span><br><span class="line">&#125;</span><br><span class="line">var tf=function(girl)&#123;</span><br><span class="line">    this.girl=girl</span><br><span class="line">    this.sendGift=function(ring)&#123;</span><br><span class="line">        console.log(&quot;Hi!&quot;+this.girl.name+&quot;who送你一个礼物&quot;+ring)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var proxyObj=function(girl)&#123;</span><br><span class="line">    this.girl=girl</span><br><span class="line">    this.sendGift=function(gitf)&#123;</span><br><span class="line">        (new tf(this.girl)).sendGift(gitf)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var proxy = new proxyObj(new wwy(&apos;wwy&apos;))</span><br><span class="line">proxy.sendGift(&apos;children&apos;)</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">var b1=document.getElementById(&apos;button1&apos;)</span><br><span class="line">    b2=document.getElementById(&apos;button2&apos;)</span><br><span class="line">    b3=document.getElementById(&apos;button3&apos;)</span><br><span class="line">//定义 setCommand函数 该函数负责往按钮上面安装命令.点击按钮后会执行command对象的execute()方法</span><br><span class="line">var setCommand = function(button,command)&#123;</span><br><span class="line">    button.onclick=function()&#123;</span><br><span class="line">        command.execute()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//下面我们自己来定义各个对象来完成自己的业务操作</span><br><span class="line">var MenuBar=&#123;</span><br><span class="line">    refersh:function()&#123;</span><br><span class="line">        alert(&apos;刷新菜单目录&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var SubMenu=&#123;</span><br><span class="line">    add:function()&#123;</span><br><span class="line">        alert(&apos;增加子菜单&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    del:function()&#123;</span><br><span class="line">        alert(&apos;删除子菜单&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//下面是编写命令类</span><br><span class="line">var RefreshMenuBarCommand=function(receiver)&#123;</span><br><span class="line">    this.receiver=receiver</span><br><span class="line">&#125;</span><br><span class="line">RefreshMenuBarCommand.prototype.execute=function()&#123;</span><br><span class="line">    this.receiver.refersh()</span><br><span class="line">&#125;</span><br><span class="line">//增加命令操作</span><br><span class="line">var AddSubMenuCommand=function(receiver)&#123;</span><br><span class="line">    this.receiver=receiver</span><br><span class="line">&#125;</span><br><span class="line">AddSubMenuCommand.prototype.execute=function()&#123;</span><br><span class="line">    this.receiver.add()</span><br><span class="line">&#125;</span><br><span class="line">//删除命令操作</span><br><span class="line">var  DelSubMenuCommand=function(receiver)&#123;</span><br><span class="line">    this.receiver=receiver</span><br><span class="line">&#125;</span><br><span class="line">DelSubMenuCommand.prototype.execute=function()&#123;</span><br><span class="line">    this.receiver.del()</span><br><span class="line">&#125;</span><br><span class="line">//最后把命令接受者传入command对象中,并且把command对象安装到button上面</span><br><span class="line">var refershBtn=new RefreshMenuBarCommand(MenuBar)</span><br><span class="line">var addBtn = new AddSubMenuCommand(subMenu)</span><br><span class="line">var delBtn = new DelSubMenuCommand(subMenu)</span><br><span class="line">setCommand(b1,refershBtn)</span><br><span class="line">setCommand(b2,addBtn)</span><br><span class="line">setCommand(b3,delBtn)</span><br><span class="line">从上面的命令代码我们可以看到,任何一个操作都有一个execute这个方法来执行操作上面的代码是使用传统的面向对象编程来实现命令模式的,命令模式过程式的请求调用封装在command对象的execute方法里.我们有没有发现上面的编写代码有点繁琐,可以直接使用callback funtion来处理</span><br><span class="line">var setCommand = function(button,cb)&#123;</span><br><span class="line">    button.onclick=function()&#123;</span><br><span class="line">        cb()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var MenuBar=&#123;</span><br><span class="line">    refersh:function()&#123;</span><br><span class="line">     console.log(&apos;刷新菜单界面&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var SubMenu=&#123;</span><br><span class="line">    add:function()&#123;</span><br><span class="line">        console.log(&apos;增加菜单&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var RefreshMenuBarCommand = function(receiver)&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        receiver.refersh()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var AddSubMenuBarCommand =function(receiver)&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        receiver.add()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var refershMenuBarCommand=RefreshMenuBarCommand(MenuBar)</span><br><span class="line">var addSubMenuCommand=AddSubMenuBarCommand(SubMenu)</span><br><span class="line">setCommand(b1,refershMenuBarCommand)</span><br><span class="line">setCommand(b2,addSubMenuCommand)</span><br><span class="line">//另一种回调函数</span><br><span class="line">var b1 = document.getElementById(&apos;button&apos;)</span><br><span class="line">var bindEnv=function(button,cb)&#123;</span><br><span class="line">    button.onclick=function()&#123;</span><br><span class="line">        cb()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var Todo=&#123;</span><br><span class="line">    test:function()&#123;</span><br><span class="line">        console.log(&apos;This is a first test&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var Menu=&#123;</span><br><span class="line">    add:function()&#123;</span><br><span class="line">        console.log(&apos;add option&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    del:function()&#123;</span><br><span class="line">        console.log(&apos;del option&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    update:function()&#123;</span><br><span class="line">        console.log(&apos;update option&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bindEnv(b1,Todo.test)</span><br><span class="line">bindEnv([触发对象],[cb])</span><br></pre></td></tr></table></figure><h2 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h2><p>模板方法模式由二部分组成,第一部分是抽象父类,第二部分是具体实现的子类 我觉得有点像父类的继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">//定义一个构造函数</span><br><span class="line">var AliInterview = function()&#123;&#125;</span><br><span class="line">//1.笔试</span><br><span class="line">AliInterview.prototype.writtenTest=function()&#123;</span><br><span class="line">    console.log(&apos;ali written&apos;)</span><br><span class="line">&#125;</span><br><span class="line">//2.技术面试</span><br><span class="line">AliInterview.prototype.technicalInterview=function()&#123;</span><br><span class="line">    console.log(&apos;ali technicalInterview&apos;)</span><br><span class="line">&#125;</span><br><span class="line">//3.HR</span><br><span class="line">AliInterview.prototype.leader=function()&#123;</span><br><span class="line">    console.log(&apos;ali leader&apos;)</span><br><span class="line">&#125;</span><br><span class="line">//4.wait Notice</span><br><span class="line">AliInterview.prototype.waitNotice=function()&#123;</span><br><span class="line">    console.log(&apos;wait notice&apos;)</span><br><span class="line">&#125;</span><br><span class="line">//初始化方法</span><br><span class="line">Ali.prototype.init=function()&#123;</span><br><span class="line">    this.writtenTest()</span><br><span class="line">    this.technicalInterview()</span><br><span class="line">    this.leader()</span><br><span class="line">    this.waitNotice()</span><br><span class="line">&#125;</span><br><span class="line">var ali=new AliInterview()</span><br><span class="line">ali.init()</span><br><span class="line"></span><br><span class="line">//create Interview class</span><br><span class="line">var Interview = function()&#123;&#125;</span><br><span class="line">Interview.prototype.writtenTest=function()&#123;</span><br><span class="line">    conosle.log(&apos;written Test&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Interview.prototype.technicalInterview=function()&#123;</span><br><span class="line">    console.log(&apos;technical interview&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Interview.prototype.leader=function()&#123;</span><br><span class="line">    console.log(&apos;leader test&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Interview.prototype.waitNotice=function()&#123;</span><br><span class="line">   console.log(&apos;wait notice&apos;) </span><br><span class="line">&#125;</span><br><span class="line">Interview.prototype.init=function()&#123;</span><br><span class="line">    this.writtenTest()</span><br><span class="line">    this.technicalInterview()</span><br><span class="line">    this.leader()</span><br><span class="line">    this.waitNotice()</span><br><span class="line">&#125;</span><br><span class="line">//create children class</span><br><span class="line">var Ali=function()&#123;&#125;</span><br><span class="line">Ali.prototype=new Interview()</span><br><span class="line">//现在我们可以在子类Ali重写父类Interview中的方法</span><br><span class="line">//子类重写方法 实现自己的业务逻辑</span><br><span class="line">Ali.prototype.writtenTest=function()&#123;</span><br><span class="line">    console.log(&apos;child written Test method&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Ali.prototype.technicalInterview=function()&#123;</span><br><span class="line">    console.log(&apos;child technicalInterview&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Ali.prototype.leader=function()&#123;</span><br><span class="line">    console.log(&apos;leader interview&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Ali.prototype.waitNotice=function()&#123;</span><br><span class="line">    console.log(&apos;wait notice&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var ali=new Ali()</span><br><span class="line">Ali.init()</span><br></pre></td></tr></table></figure></p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//面向对象实现</span><br><span class="line">//创建绩效考核类</span><br><span class="line">var performanceA=function()&#123;&#125;</span><br><span class="line">performanceA.prototype.calculate=function(salary)&#123;</span><br><span class="line">    return salary*4</span><br><span class="line">&#125;</span><br><span class="line">var performanceB=function()&#123;&#125;</span><br><span class="line">performanceB.prototype.calculate=function(salary)&#123;</span><br><span class="line">    return salary*3</span><br><span class="line">&#125;</span><br><span class="line">var performanceC=function()&#123;&#125;</span><br><span class="line">performanceC.prototype.claculate=function(salary)&#123;</span><br><span class="line">    return salary*2</span><br><span class="line">&#125;</span><br><span class="line">//奖金类</span><br><span class="line">var Bouns=function()&#123;</span><br><span class="line">    this.salary=null</span><br><span class="line">    this.levelObj=null</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.setSalary=function(salary)&#123;</span><br><span class="line">    this.salary=salary</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.setlevelObj=function(levelObj)&#123;</span><br><span class="line">    this.levelObj=levelObj</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.getBouns=function()&#123;</span><br><span class="line">    return this.levelObj.calculate(this.salary)</span><br><span class="line">&#125;</span><br><span class="line">var bouns=new Bouns()</span><br><span class="line">bouns.setSalary(10000)</span><br><span class="line">bouns.setlevelObj(new performanceA())</span><br><span class="line">console.log(bouns.getBounds())</span><br></pre></td></tr></table></figure><div class="tip"><br>采用面向对象看起来是真的繁琐,下面策略模式<br></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//使用策略模式</span><br><span class="line">var obj=&#123;</span><br><span class="line">    &quot;A&quot;:function(salary)&#123;</span><br><span class="line">        return salary*4</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;B&quot;:function(salary)&#123;</span><br><span class="line">        return salary*3</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;C&quot;:function(salary)&#123;</span><br><span class="line">        return salary*2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var calculateBouns=function(level,salary)&#123;</span><br><span class="line">    return obj[level](salary)</span><br><span class="line">&#125;</span><br><span class="line">console.log(calculateBouns(&apos;A&apos;,10000))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="http://yoursite.com/2019/01/10/inherit/"/>
    <id>http://yoursite.com/2019/01/10/inherit/</id>
    <published>2019-01-10T03:00:10.000Z</published>
    <updated>2019-01-10T07:26:35.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造函数形式的继承"><a href="#构造函数形式的继承" class="headerlink" title="构造函数形式的继承"></a>构造函数形式的继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Animal()&#123;</span><br><span class="line">    this.eat=function()&#123;</span><br><span class="line">        console.log(&apos;animal eat&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function Dog()&#123;</span><br><span class="line">    this.bark=function()&#123;</span><br><span class="line">        console.log(&apos;Dog bark&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype=new Animal()</span><br><span class="line">var dog1=new Dog()</span><br><span class="line">dog1.eat()</span><br></pre></td></tr></table></figure><h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(this.name+&apos;eat&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal()&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        super(name)//继承父类</span><br><span class="line">        this.age=age</span><br><span class="line">    &#125;</span><br><span class="line">    say()&#123;</span><br><span class="line">        console.log(this.name+&apos;say&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const dog=new Dog(&apos;哈士奇&apos;)</span><br><span class="line">dog.say()</span><br></pre></td></tr></table></figure><h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//高程6.3继承</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;构造函数形式的继承&quot;&gt;&lt;a href=&quot;#构造函数形式的继承&quot; class=&quot;headerlink&quot; title=&quot;构造函数形式的继承&quot;&gt;&lt;/a&gt;构造函数形式的继承&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建对象的几种方式</title>
    <link href="http://yoursite.com/2019/01/09/object/"/>
    <id>http://yoursite.com/2019/01/09/object/</id>
    <published>2019-01-09T07:32:12.000Z</published>
    <updated>2019-01-10T03:03:13.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object构造函数和字面量"><a href="#Object构造函数和字面量" class="headerlink" title="Object构造函数和字面量"></a>Object构造函数和字面量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var person=new Object()</span><br><span class="line">person.age=24</span><br><span class="line">person.sex=&apos;man&apos;</span><br><span class="line">var  perosn=&#123;</span><br><span class="line">    age:24,</span><br><span class="line">    sex:&apos;man&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(age,name)&#123;</span><br><span class="line">    var o=new Object()</span><br><span class="line">    o.age=age</span><br><span class="line">    o.name=name</span><br><span class="line">    o.code=function()&#123;</span><br><span class="line">        console.log(&apos;hello world&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    return o</span><br><span class="line">&#125;</span><br><span class="line">var person1=createPerson(24,&apos;wwy&apos;)</span><br><span class="line">var person2=createPerson(24,&apos;tf&apos;)</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(age,name)&#123;</span><br><span class="line">    this.age=age</span><br><span class="line">    this.name=name</span><br><span class="line">    this.code=code</span><br><span class="line">&#125;</span><br><span class="line">function code()&#123;</span><br><span class="line">    console.log(&apos;hello world&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var person1=new Person(24,&apos;wwy&apos;)</span><br><span class="line">var person2=new Person(24,&apos;tf&apos;)</span><br></pre></td></tr></table></figure><div class="tip"><br>    每个方法都在每个实例上重新创建<br>    在使用构造函数时需要把function放到全局<br>    这样就没有封装性—原型模式(但是现在都不怎么用就省略)<br>    person1.code === person2.code =&gt; false<br></div><h2 id="原型模式-构造模式"><a href="#原型模式-构造模式" class="headerlink" title="原型模式+构造模式"></a>原型模式+构造模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Person(age,name)&#123;</span><br><span class="line">    this.age=age</span><br><span class="line">    this.name=name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    cry:function()&#123;</span><br><span class="line">    console.log(&apos;hello world&apos;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person1=new Person(24,&apos;wwy&apos;)</span><br></pre></td></tr></table></figure><h2 id="class定义类"><a href="#class定义类" class="headerlink" title="class定义类"></a>class定义类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    //构造函数</span><br><span class="line">    constructor(age,name)&#123;</span><br><span class="line">        this.age=age</span><br><span class="line">        this.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    //相当于Person.prototype.say=functio()&#123;....&#125;</span><br><span class="line">    say()&#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person1=new Person(24,&apos;wwy&apos;)</span><br></pre></td></tr></table></figure><div class="tip"><br>    1.class 必须要使用new来实例化一个对象,构造函数不用new也能执行<br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object构造函数和字面量&quot;&gt;&lt;a href=&quot;#Object构造函数和字面量&quot; class=&quot;headerlink&quot; title=&quot;Object构造函数和字面量&quot;&gt;&lt;/a&gt;Object构造函数和字面量&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://yoursite.com/2019/01/09/webpack/"/>
    <id>http://yoursite.com/2019/01/09/webpack/</id>
    <published>2019-01-09T02:23:10.000Z</published>
    <updated>2019-01-09T07:21:34.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack4-构建vue-cli"><a href="#webpack4-构建vue-cli" class="headerlink" title="webpack4 构建vue-cli"></a>webpack4 构建vue-cli</h1><p>   #需要安装的devDependencies<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&quot;@babel/core&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">&quot;@babel/preset-env&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">&quot;add-asset-html-webpack-plugin&quot;: &quot;^3.1.2&quot;,</span><br><span class="line">&quot;autoprefixer&quot;: &quot;^9.4.3&quot;,</span><br><span class="line">&quot;babel-core&quot;: &quot;^6.26.3&quot;,</span><br><span class="line">&quot;babel-helper-vue-jsx-merge-props&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;babel-loader&quot;: &quot;^8.0.4&quot;,</span><br><span class="line">&quot;babel-plugin-dynamic-import-webpack&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">&quot;babel-plugin-syntax-jsx&quot;: &quot;^6.18.0&quot;,</span><br><span class="line">&quot;babel-plugin-transform-vue-jsx&quot;: &quot;^3.7.0&quot;,</span><br><span class="line">&quot;clean-webpack-plugin&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">&quot;compression-webpack-plugin&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;cross-env&quot;: &quot;^5.2.0&quot;,//解决mac和win启动webpack-server-dev 脚本统一</span><br><span class="line">&quot;crypto-js&quot;: &quot;^3.1.9-1&quot;,//Aes加密使用</span><br><span class="line">&quot;css-loader&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;file-loader&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;friendly-errors-webpack-plugin&quot;: &quot;^1.7.0&quot;,//屏蔽一些无关的输出</span><br><span class="line">&quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">&quot;image-webpack-loader&quot;: &quot;^4.6.0&quot;,//图片压缩</span><br><span class="line">&quot;less&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">&quot;less-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class="line">&quot;mini-css-extract-plugin&quot;: &quot;^0.5.0&quot;,</span><br><span class="line">&quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.1&quot;,</span><br><span class="line">&quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">&quot;px2rem-loader&quot;: &quot;^0.1.9&quot;,//rem 转换</span><br><span class="line">&quot;style-loader&quot;: &quot;^0.23.1&quot;,</span><br><span class="line">&quot;uglifyjs-webpack-plugin&quot;: &quot;^2.0.1&quot;,</span><br><span class="line">&quot;url-loader&quot;: &quot;^1.1.2&quot;,</span><br><span class="line">&quot;vue-loader&quot;: &quot;^15.4.2&quot;,</span><br><span class="line">&quot;vue-template-compiler&quot;: &quot;^2.5.21&quot;,</span><br><span class="line">&quot;webpack&quot;: &quot;^4.27.1&quot;,</span><br><span class="line">&quot;webpack-bundle-analyzer&quot;: &quot;^3.0.3&quot;,</span><br><span class="line">&quot;webpack-cli&quot;: &quot;^3.1.2&quot;,</span><br><span class="line">&quot;webpack-dev-server&quot;: &quot;^3.1.10&quot;</span><br></pre></td></tr></table></figure></p><p>#需要安装的dependencies<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;@babel/polyfill&quot;: &quot;^7.0.0&quot;,//es6转化使用 </span><br><span class="line">&quot;axios&quot;: &quot;^0.18.0&quot;,//请求库</span><br><span class="line">&quot;fastclick&quot;: &quot;^1.0.6&quot;,//解决移动端点击延迟</span><br><span class="line">&quot;lib-flexible&quot;: &quot;^0.3.2&quot;,//移动端适配插件</span><br><span class="line">&quot;vue&quot;: &quot;^2.5.21&quot;,</span><br><span class="line">&quot;vue-router&quot;: &quot;^3.0.2&quot;,</span><br><span class="line">&quot;vuex&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">&quot;vuex-persistedstate&quot;: &quot;^2.5.4&quot;//处理vuex不能持久保存 底层使用的是localStorage</span><br></pre></td></tr></table></figure></p><p>#webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">const path=require(&apos;path&apos;)//node路径库标识打包文件的当前路径</span><br><span class="line">const webpack=require(&apos;webpack&apos;)</span><br><span class="line">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;)</span><br><span class="line">const HTMLPlugin=require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const UglifyJsPlugin=require(&apos;uglifyjs-webpack-plugin&apos;)</span><br><span class="line">const MiniExtractPlugin=require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">const OptimizeCSSAssetsPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line">const CleanWebpackPlugin=require(&apos;clean-webpack-plugin&apos;)</span><br><span class="line">const AddAssetHtmlWebpackPlugin=require(&apos;add-asset-html-webpack-plugin&apos;)</span><br><span class="line">const FriendlyErrorsWebpackPlugin=require(&apos;friendly-errors-webpack-plugin&apos;)</span><br><span class="line">const WebpackBundleAnalzyer = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br><span class="line">const CompressionPlugin=require(&apos;compression-webpack-plugin&apos;)</span><br><span class="line">const isDev=process.env.NODE_ENV===&quot;production&quot;</span><br><span class="line">const config=&#123;</span><br><span class="line">    entry:[</span><br><span class="line">        path.join(__dirname,&apos;../src/index.js&apos;)//入口文件</span><br><span class="line">    ],</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;js/[name].[hash:7].js&apos;,//输出文件路径以及文件名</span><br><span class="line">        path:path.join(__dirname,&apos;../dist&apos;),</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: &#123;</span><br><span class="line">        //不使用cdn 可以直接忽略 </span><br><span class="line">        //主要是为了解决首页白屏问题</span><br><span class="line">        //会加快一点点</span><br><span class="line">       &lt;!-- &lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/babel-polyfill/7.0.0-rc.4/polyfill.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.21/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/axios/0.18.0/axios.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line">        //这里主要是使用 cdn 前面的是包名字</span><br><span class="line">        //就像import Vue from &apos;vue&apos;</span><br><span class="line">        //后面的是暴露在项目中使用的变量</span><br><span class="line">        &apos;vue&apos;: &apos;Vue&apos;,</span><br><span class="line">        &apos;vue-router&apos;: &apos;VueRouter&apos;,</span><br><span class="line">        &apos;vuex&apos;: &apos;Vuex&apos;,</span><br><span class="line">        &apos;axios&apos;: &apos;axios&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: isDev ? &quot;production&quot;:&quot;development&quot;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">           &#123;</span><br><span class="line">               test: /\.vue$/,</span><br><span class="line">               loader: &apos;vue-loader&apos;,</span><br><span class="line">                exclude: /node_modules/</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader:&apos;babel-loader&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               test: /\.jsx$/,</span><br><span class="line">               loader: &apos;babel-loader&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">                test:/\.less/,</span><br><span class="line">               exclude: /node_modules/,</span><br><span class="line">                use:[</span><br><span class="line">                    //这里要注意了</span><br><span class="line">                    isDev?MiniExtractPlugin.loader:&apos;style-loader&apos;, </span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;postcss-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            sourceMap:false</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;px2rem-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            remUnit: 37.5</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &apos;less-loader&apos;,</span><br><span class="line">                ]</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               test:/\.(gif|jpg|jpeg|png|svg)/,</span><br><span class="line">               exclude: /node_modules/,</span><br><span class="line">               use:[</span><br><span class="line">                   &#123;</span><br><span class="line">                       loader: &apos;url-loader&apos;,</span><br><span class="line">                       options:&#123;</span><br><span class="line">                           limit:10000,</span><br><span class="line">                           name:&apos;images/[name].[hash:5].[ext]&apos;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        extensions:[&apos;.js&apos;,&apos;.vue&apos;,&apos;.json&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new VueLoaderPlugin(),</span><br><span class="line">        // Dll 打包插件(在打包的时候不在打包那些你提取出来的公共模块)</span><br><span class="line">        new webpack.DllReferencePlugin(&#123;</span><br><span class="line">            context: path.resolve(__dirname, &apos;../&apos;),</span><br><span class="line">            manifest: require(&apos;./vendor-manifest.json&apos;)</span><br><span class="line">        &#125;),</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &apos;process.env&apos;:&#123;</span><br><span class="line">                NODE_ENV: isDev ? &apos;&quot;production&quot;&apos;:&apos;&quot;development&quot;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniExtractPlugin(&#123;</span><br><span class="line">            filename: &apos;css/[name].[contenthash:7].css&apos;,</span><br><span class="line">            chunkFilename:&apos;css/[name].[contenthash:7].css&apos; </span><br><span class="line">        &#125;),</span><br><span class="line">        new HTMLPlugin(&#123;</span><br><span class="line">            hash:true,</span><br><span class="line">            template:&apos;index.html&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">            filepath:path.resolve(__dirname,&apos;../static/commonJS/*.dll.js&apos;),</span><br><span class="line">            hash: true,</span><br><span class="line">            includeSourcemap: false,</span><br><span class="line">            publicPath: &apos;./js&apos;,</span><br><span class="line">            outputPath: &apos;../dist/js&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimizer:[new UglifyJsPlugin(&#123;</span><br><span class="line">            cache:true,</span><br><span class="line">            parallel:true,</span><br><span class="line">            sourceMap: true</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCSSAssetsPlugin()</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!isDev)&#123;</span><br><span class="line">    const devConfig=&#123;</span><br><span class="line">        port:8080,</span><br><span class="line">        host:&apos;0.0.0.0&apos;,</span><br><span class="line">        proxyTarget: &apos;http://192.168.0.136:9526/api&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    config.devtool = &apos;cheap-module-eval-source-map&apos;</span><br><span class="line">    config.devServer=&#123;</span><br><span class="line">        port:devConfig.port,</span><br><span class="line">        host:devConfig.host,</span><br><span class="line">        contentBase: path.join(__dirname, &quot;dist&quot;),</span><br><span class="line">        overlay:true,</span><br><span class="line">        compress: true,</span><br><span class="line">        hot:true,</span><br><span class="line">        quiet: true,</span><br><span class="line">        open: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">             &quot;/api&quot;: &#123;</span><br><span class="line">                 target: devConfig.proxyTarget,</span><br><span class="line">                 pathRewrite: &#123;</span><br><span class="line">                     &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 changeOrigin: true</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            index: path.join(__dirname,&apos;../index.html&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    config.plugins.push(...[new FriendlyErrorsWebpackPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo:&#123;</span><br><span class="line">            messages: [`随便写一些东西都可以`]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) ,new webpack.HotModuleReplacementPlugin(), </span><br><span class="line">        new webpack.NamedModulesPlugin(), </span><br><span class="line">        new webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br><span class="line">if(isDev)&#123; </span><br><span class="line">    config.plugins.push(</span><br><span class="line">         ...[new CleanWebpackPlugin([&apos;dist&apos;], &#123;</span><br><span class="line">             root: path.resolve(__dirname, &apos;../&apos;)</span><br><span class="line">        &#125;), new WebpackBundleAnalzyer(),</span><br><span class="line">            new CompressionPlugin(&#123;</span><br><span class="line">                filename: &apos;[path].gz&apos;,</span><br><span class="line">                algorithm: &apos;gzip&apos;,</span><br><span class="line">                test: new RegExp(&apos;\\.(js|css)$&apos;),</span><br><span class="line">                threshold: 10240,</span><br><span class="line">                minRatio: 0.8</span><br><span class="line">            &#125;)</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line">    config.module.rules[4].use.push(&#123;loader:&apos;image-webpack-loader&apos;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports=config</span><br></pre></td></tr></table></figure></p><p>#配置package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --progress  --config build/webpack.config.js&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --inline  --progress --config  build/webpack.config.js&quot;,</span><br><span class="line">&quot;dll&quot;: &quot;webpack --progress --config build/webpack.dll.config.js&quot;</span><br></pre></td></tr></table></figure></p><div class="tip"><br>    在执行npm run build || npm run dev<br>    需要先执行npm run dll 生成公共模块文件<br></div><br>## <a href="https://github.com/fengtang0202/vue-webpack" target="_blank" rel="noopener">GitHub代码地址</a><br><div class="tip"><br>    在构建vue-cli碰到了很多问题,也想过放弃自己构建cli<br>    由于vue-cli2是适用于所有用户,在生产环境中还是需要自己构建cli<br>    经过这次的webpack构建适用了<br>    初步了解了webpack基本的使用,遇到错误先看看错误,是否能解决<br>    1.我的思路就是英文看不懂CV翻译看看到底是什么问题<br>    2.要有独立思考,别一出错就直接百度(不考虑工期0:)<br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack4-构建vue-cli&quot;&gt;&lt;a href=&quot;#webpack4-构建vue-cli&quot; class=&quot;headerlink&quot; title=&quot;webpack4 构建vue-cli&quot;&gt;&lt;/a&gt;webpack4 构建vue-cli&lt;/h1&gt;&lt;p&gt;   #需要
      
    
    </summary>
    
    
  </entry>
  
</feed>
